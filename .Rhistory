ctest <- data.frame(rda1=proc.lip.16S.bray$Yrot[,1],
rda2=proc.lip.16S.bray$Yrot[,2],xrda1=proc.lip.16S.bray$X[,1],
xrda2=proc.lip.16S.bray$X[,2])
ctest <- cbind(ctest, ps.16S.baseline.matched@sam_data[rownames(ctest),])
ctest$FMT <- factor(ctest$FMT, levels=c(levels(ctest$FMT),"Donor"))
ctest$color <- factor("MIRNABL", levels = names(colorvec))
ctest$color2 <- factor("16SBL", levels = names(colorvec))
p.procust <- ggplot(ctest,drop=FALSE) +
theme_bw() +
geom_point(aes(x=rda1, y=rda2, color=color, shape=FMT),drop=FALSE, size=3) +
geom_point(aes(x=xrda1, y=xrda2, color=color2, shape=FMT),drop=FALSE, size=3) +
geom_segment(aes(x=rda1,y=rda2,xend=xrda1,yend=xrda2,colour=color),arrow=arrow(length=unit(0.2,"cm")),drop=FALSE, alpha=0.5) +
scale_color_manual(values = colorvec,drop=FALSE) +
#labs(title="Microbiome miRNA procrustus ordination") +
NULL; plot(p.procust)
pca.16 <- prcomp(t(microbiome::transform(ps.16S.baseline.matched, "clr")@otu_table@.Data))
pcoa.16S
pca.16$rotation
pca.16$rotation[,1]
pcoa.16S$vectors[,1]
plot(pca.16$rotation[,1],pcoa.16S$vectors[,1])
proc.lip.16S.bray <- procrustes(pca.16, pcoa.16S)
pca.16$x
pca.16 <- prcomp((microbiome::transform(ps.16S.baseline.matched, "clr")@otu_table@.Data))
pcoa.16S
proc.lip.16S.bray <- procrustes(pca.16, pcoa.16S)
plot(proc.lip.16S.bray)
pca.16 <- prcomp((microbiome::transform(ps.16S.baseline.matched, "clr")@otu_table@.Data))
pcoa.16S
proc.lip.16S.bray <- procrustes(pca.16, pcoa.16S)
plot(proc.lip.16S.bray)
pca.16 <- prcomp((microbiome::transform(ps.16S.baseline.matched, "clr")@otu_table@.Data))
proc.lip.16S.bray <- procrustes(pca.16, pcoa.16S)
plot(proc.lip.16S.bray)
pca.16 <- prcomp((microbiome::transform(ps.16S.baseline.matched, "clr")@otu_table@.Data))
proc.lip.16S.bray <- procrustes(pca.16, pcoa.16S)
plot(proc.lip.16S.bray)
dis.16s <- as.matrix(phyloseq::distance(ps.16S.baseline.matched, "bray"))
pcoa.16S <- ape::pcoa(dis.16s)
proc.lip.16S.bray <- procrustes(pca.16, pcoa.16S)
pcoa.16S$scores <- pcoa.16S$vectors
proc.lip.16S.bray <- procrustes(pca.16, pcoa.16S)
plot(proc.lip.16S.bray)
plot(proc.lip.16S.bray, kind = 2)
protest(pca.16, pcoa.16S)
protest(pca.16, pcoa.16S, permutations = 999999999)
protest(pca.16, pcoa.16S, permutations = 9999999)
protest(pca.16, pcoa.16S, permutations = 999999)
protest(pca.16, pcoa.16S, permutations = 99999)
pcoa.16S$vectors
pcoa.16S$vectors[,sample(colnames(pcoa.16S$vectors))]
pcoa.16S$scores <- pcoa.16S$vectors[,sample(colnames(pcoa.16S$vectors))]
proc.lip.16S.bray <- procrustes(pca.16, pcoa.16S)
plot(proc.lip.16S.bray)
plot(proc.lip.16S.bray, kind = 2)
protest(pca.16, pcoa.16S, permutations = 99999)
dis.16s <- as.matrix(phyloseq::distance(ps.16S.baseline.matched, "bray"))
pcoa.16S <- ape::pcoa(dis.16s)
pcoa.16S$scores <- pcoa.16S$vectors[,sample(colnames(pcoa.16S$vectors))] # The order of the components does not matter
proc.lip.16S.bray <- procrustes(pca.16, pcoa.16S)
plot(proc.lip.16S.bray)
plot(proc.lip.16S.bray, kind = 2)
protest(pca.16, pcoa.16S, permutations = 99999)
proc.lip.16S.bray <- procrustes(pcoa.miRNA, pcoa.16S)
plot(proc.lip.16S.bray)
plot(proc.lip.16S.bray, kind=2)
ctest <- data.frame(rda1=proc.lip.16S.bray$Yrot[,1],
rda2=proc.lip.16S.bray$Yrot[,2],xrda1=proc.lip.16S.bray$X[,1],
xrda2=proc.lip.16S.bray$X[,2])
ctest <- cbind(ctest, ps.16S.baseline.matched@sam_data[rownames(ctest),])
ctest$FMT <- factor(ctest$FMT, levels=c(levels(ctest$FMT),"Donor"))
ctest$color <- factor("MIRNABL", levels = names(colorvec))
ctest$color2 <- factor("16SBL", levels = names(colorvec))
p.procust <- ggplot(ctest,drop=FALSE) +
theme_bw() +
geom_point(aes(x=rda1, y=rda2, color=color, shape=FMT),drop=FALSE, size=3) +
geom_point(aes(x=xrda1, y=xrda2, color=color2, shape=FMT),drop=FALSE, size=3) +
geom_segment(aes(x=rda1,y=rda2,xend=xrda1,yend=xrda2,colour=color),arrow=arrow(length=unit(0.2,"cm")),drop=FALSE, alpha=0.5) +
scale_color_manual(values = colorvec,drop=T) +
#labs(title="Microbiome miRNA procrustus ordination") +
NULL; plot(p.procust)
ctest$Subject_ID
p.procust <- ggplot(ctest,drop=FALSE) +
theme_bw() +
geom_point(aes(x=rda1, y=rda2, color=color, shape=FMT),drop=FALSE, size=3) +
geom_point(aes(x=xrda1, y=xrda2, color=color2, shape=FMT),drop=FALSE, size=3) +
geom_segment(aes(x=rda1,y=rda2,xend=xrda1,yend=xrda2,colour=color),arrow=arrow(length=unit(0.2,"cm")),drop=FALSE, alpha=0.5) +
scale_color_manual(values = colorvec,drop=T) +
#labs(title="Microbiome miRNA procrustus ordination") +
ggrepel::geom_text_repel(aes(label=Subject_ID))+
NULL; plot(p.procust)
proc.lip.16S.bray <- procrustes(pcoa.miRNA, pcoa.16S)
plot(proc.lip.16S.bray)
plot(proc.lip.16S.bray, kind=2)
ctest <- data.frame(rda1=proc.lip.16S.bray$Yrot[,1],
rda2=proc.lip.16S.bray$Yrot[,2],xrda1=proc.lip.16S.bray$X[,1],
xrda2=proc.lip.16S.bray$X[,2])
ctest <- cbind(ctest, ps.16S.baseline.matched@sam_data[rownames(ctest),])
ctest$FMT <- factor(ctest$FMT, levels=c(levels(ctest$FMT),"Donor"))
ctest$color <- factor("MIRNABL", levels = names(colorvec))
ctest$color2 <- factor("16SBL", levels = names(colorvec))
p.procust <- ggplot(ctest,drop=FALSE) +
theme_bw() +
geom_point(aes(x=rda1, y=rda2, color=color, shape=FMT),drop=FALSE, size=3) +
geom_point(aes(x=xrda1, y=xrda2, color=color2, shape=FMT),drop=FALSE, size=3) +
geom_segment(aes(x=rda1,y=rda2,xend=xrda1,yend=xrda2,colour=color),arrow=arrow(length=unit(0.2,"cm")),drop=FALSE, alpha=0.5) +
scale_color_manual(values = colorvec,drop=T) +
#labs(title="Microbiome miRNA procrustus ordination") +
ggrepel::geom_text_repel(aes(label=Subject_ID)) +
NULL; plot(p.procust)
p.procust <- ggplot(ctest,drop=FALSE) +
theme_bw() +
geom_point(aes(x=rda1, y=rda2, color=color, shape=FMT),drop=FALSE, size=3) +
geom_point(aes(x=xrda1, y=xrda2, color=color2, shape=FMT),drop=FALSE, size=3) +
geom_segment(aes(x=rda1,y=rda2,xend=xrda1,yend=xrda2,colour=color),arrow=arrow(length=unit(0.2,"cm")),drop=FALSE, alpha=0.5) +
scale_color_manual(values = colorvec,drop=T) +
#labs(title="Microbiome miRNA procrustus ordination") +
#ggrepel::geom_text_repel(aes(label=Subject_ID)) +
NULL; plot(p.procust)
ctest$Subject_ID
p.procust <- ggplot(ctest,drop=FALSE) +
theme_bw() +
geom_point(aes(x=rda1, y=rda2, color=color, shape=FMT),drop=FALSE, size=3) +
geom_point(aes(x=xrda1, y=xrda2, color=color2, shape=FMT),drop=FALSE, size=3) +
geom_segment(aes(x=rda1,y=rda2,xend=xrda1,yend=xrda2,colour=color),arrow=arrow(length=unit(0.2,"cm")),drop=FALSE, alpha=0.5) +
scale_color_manual(values = colorvec,drop=T) +
#labs(title="Microbiome miRNA procrustus ordination") +
#ggrepel::geom_text_repel(aes(label=Subject_ID)) +
NULL; plot(p.procust)
p.procust <- ggplot(ctest,drop=FALSE) +
theme_bw() +
geom_point(aes(x=rda1, y=rda2, color=color, shape=FMT),drop=FALSE, size=3) +
geom_point(aes(x=xrda1, y=xrda2, color=color2, shape=FMT),drop=FALSE, size=3) +
geom_segment(aes(x=rda1,y=rda2,xend=xrda1,yend=xrda2,colour=color),arrow=arrow(length=unit(0.2,"cm")),drop=FALSE, alpha=0.5) +
scale_color_manual(values = colorvec,drop=T) +
#labs(title="Microbiome miRNA procrustus ordination") +
ggrepel::geom_text_repel(aes(label=Subject_ID)) +
NULL; plot(p.procust)
p.procust <- ggplot(ctest,drop=FALSE) +
theme_bw() +
geom_point(aes(x=rda1, y=rda2, color=color, shape=FMT),drop=FALSE, size=3) +
geom_point(aes(x=xrda1, y=xrda2, color=color2, shape=FMT),drop=FALSE, size=3) +
geom_segment(aes(x=rda1,y=rda2,xend=xrda1,yend=xrda2,colour=color),arrow=arrow(length=unit(0.2,"cm")),drop=FALSE, alpha=0.5) +
scale_color_manual(values = colorvec,drop=T) +
#labs(title="Microbiome miRNA procrustus ordination") +
ggrepel::geom_text_repel(aes(x=rda1, y=rda2, label=Subject_ID)) +
NULL; plot(p.procust)
p.procust <- ggplot(ctest,drop=FALSE) +
theme_bw() +
geom_point(aes(x=rda1, y=rda2, color=color, shape=FMT),drop=FALSE, size=3) +
geom_point(aes(x=xrda1, y=xrda2, color=color2, shape=FMT),drop=FALSE, size=3) +
geom_segment(aes(x=rda1,y=rda2,xend=xrda1,yend=xrda2,colour=color),arrow=arrow(length=unit(0.2,"cm")),drop=FALSE, alpha=0.5) +
scale_color_manual(values = colorvec,drop=T) +
#labs(title="Microbiome miRNA procrustus ordination") +
ggrepel::geom_text_repel(aes(x=xrda1, y=xrda2, label=Subject_ID)) +
NULL; plot(p.procust)
proc.lip.16S.bray <- procrustes(pcoa.miRNA, pcoa.16S)
plot(proc.lip.16S.bray)
plot(proc.lip.16S.bray, kind=2)
ctest <- data.frame(rda1=proc.lip.16S.bray$Yrot[,1],
rda2=proc.lip.16S.bray$Yrot[,2],xrda1=proc.lip.16S.bray$X[,1],
xrda2=proc.lip.16S.bray$X[,2])
ctest <- cbind(ctest, ps.16S.baseline.matched@sam_data[rownames(ctest),])
ctest$FMT <- factor(ctest$FMT, levels=c(levels(ctest$FMT),"Donor"))
ctest$color <- factor("MIRNABL", levels = names(colorvec))
ctest$color2 <- factor("16SBL", levels = names(colorvec))
p.procust <- ggplot(ctest,drop=FALSE) +
theme_bw() +
geom_point(aes(x=rda1, y=rda2, color=color, shape=FMT),drop=FALSE, size=3) +
geom_point(aes(x=xrda1, y=xrda2, color=color2, shape=FMT),drop=FALSE, size=3) +
geom_segment(aes(x=rda1,y=rda2,xend=xrda1,yend=xrda2,colour=color),arrow=arrow(length=unit(0.2,"cm")),drop=FALSE, alpha=0.5) +
scale_color_manual(values = colorvec,drop=T) +
#labs(title="Microbiome miRNA procrustus ordination") +
ggrepel::geom_text_repel(aes(x=xrda1, y=xrda2, label=Subject_ID)) +
NULL; plot(p.procust)
pcoa.miRNA$vectors
pcoa.miRNA$vectors[sample(row.names(pcoa.miRNA$vectors)),]
pcoa.miRNA$scores <- pcoa.miRNA$vectors[sample(row.names(pcoa.miRNA$vectors)),]
plot_ordination(ps.16S.baseline.matched, pcoa.16S) +
ggrepel::geom_text_repel(aes(label=Subject_ID)) +
labs(title="PCoA 16S (euclidean-clr)")
plot_ordination(ps.miRNA.baseline.matched, pcoa.miRNA) +
ggrepel::geom_text_repel(aes(label=Subject_ID)) +
labs(title="PCoA miRNA (euclidean-clr)")
pcoa.16S <- ape::pcoa(dis.16s)
pcoa.miRNA <- ape::pcoa(dis.miRNA)
pcoa.16S$scores <- pcoa.16S$vectors
pcoa.miRNA$scores <- pcoa.miRNA$vectors[sample(row.names(pcoa.miRNA$vectors)),]
plot_ordination(ps.16S.baseline.matched, pcoa.16S) +
ggrepel::geom_text_repel(aes(label=Subject_ID)) +
labs(title="PCoA 16S (euclidean-clr)")
plot_ordination(ps.miRNA.baseline.matched, pcoa.miRNA) +
ggrepel::geom_text_repel(aes(label=Subject_ID)) +
labs(title="PCoA miRNA (euclidean-clr)")
proc.lip.16S.bray <- procrustes(pcoa.miRNA, pcoa.16S)
plot(proc.lip.16S.bray)
plot(proc.lip.16S.bray, kind=2)
ctest <- data.frame(rda1=proc.lip.16S.bray$Yrot[,1],
rda2=proc.lip.16S.bray$Yrot[,2],xrda1=proc.lip.16S.bray$X[,1],
xrda2=proc.lip.16S.bray$X[,2])
ctest <- cbind(ctest, ps.16S.baseline.matched@sam_data[rownames(ctest),])
ctest$FMT <- factor(ctest$FMT, levels=c(levels(ctest$FMT),"Donor"))
ctest$color <- factor("MIRNABL", levels = names(colorvec))
ctest$color2 <- factor("16SBL", levels = names(colorvec))
p.procust <- ggplot(ctest,drop=FALSE) +
theme_bw() +
geom_point(aes(x=rda1, y=rda2, color=color, shape=FMT),drop=FALSE, size=3) +
geom_point(aes(x=xrda1, y=xrda2, color=color2, shape=FMT),drop=FALSE, size=3) +
geom_segment(aes(x=rda1,y=rda2,xend=xrda1,yend=xrda2,colour=color),arrow=arrow(length=unit(0.2,"cm")),drop=FALSE, alpha=0.5) +
scale_color_manual(values = colorvec,drop=T) +
#labs(title="Microbiome miRNA procrustus ordination") +
ggrepel::geom_text_repel(aes(x=xrda1, y=xrda2, label=Subject_ID)) +
NULL; plot(p.procust)
protest(pcoa.miRNA,pcoa.16S, permutations = 9999)
protest(pcoa.miRNA,pcoa.16S, permutations = 9999)
res <- list()
for (i in 1:999){
pcoa.miRNA$scores <- pcoa.miRNA$vectors[sample(row.names(pcoa.miRNA$vectors)),]
res[[i]] <- protest(pcoa.miRNA,pcoa.16S, permutations = 1)
}
res[[1]]
protest
res[[1]]$t0
res[[1]]
res[[1]]$t0
lapply(res, function(x) x$t0)
unlist(lapply(res, function(x) x$t0))
hist(unlist(lapply(res, function(x) x$t0)))
protest(pcoa.miRNA,pcoa.16S, permutations = 1)$t0
hist(unlist(lapply(res, function(x) x$t0))); abline(v = protest(pcoa.miRNA,pcoa.16S, permutations = 1)$t0, color="red")
res <- list()
for (i in 1:999){
pcoa.miRNA$scores <- pcoa.miRNA$vectors[sample(row.names(pcoa.miRNA$vectors)),]
res[[i]] <- protest(pcoa.miRNA,pcoa.16S, permutations = 1)
}
pcoa.miRNA$scores <- pcoa.miRNA$vectors
hist(unlist(lapply(res, function(x) x$t0))); abline(v = protest(pcoa.miRNA,pcoa.16S, permutations = 1)$t0, color="red")
res <- list()
for (i in 1:999){
pcoa.miRNA$scores <- pcoa.miRNA$vectors[sample(row.names(pcoa.miRNA$vectors)),]
res[[i]] <- protest(pcoa.miRNA,pcoa.16S, permutations = 1)
}
pcoa.miRNA$scores <- pcoa.miRNA$vectors
hist(unlist(lapply(res, function(x) x$t0))); abline(v = protest(pcoa.miRNA,pcoa.16S, permutations = 1)$t0, color="red")
hist(unlist(lapply(res, function(x) x$t0)), breaks = 20); abline(v = protest(pcoa.miRNA,pcoa.16S, permutations = 1)$t0, color="red")
hist(unlist(lapply(res, function(x) x$t0)), breaks = 20); abline(v = protest(pcoa.miRNA,pcoa.16S, permutations = 1)$t0, color="red")
res <- list()
for (i in 1:999){
pcoa.miRNA$scores <- pcoa.miRNA$vectors[sample(row.names(pcoa.miRNA$vectors)),]
res[[i]] <- protest(pcoa.miRNA,pcoa.16S, permutations = 1)
}
pcoa.miRNA$scores <- pcoa.miRNA$vectors
hist(unlist(lapply(res, function(x) x$t0)), breaks = 20); abline(v = protest(pcoa.miRNA,pcoa.16S, permutations = 1)$t0, color="red")
knitr::opts_chunk$set(echo = TRUE)
library(lmerTest)
library(ggplot2)
ps <- readRDS(url("https://github.com/AMCMC/MiCA-Tutorials/raw/master/Data_files/ps.2018_27_RED_study.2019-03-04.filtered.RDS"))
ps@sam_data$Treatment <- ps@sam_data$Randomization
ps.alpa <- rarefy_even_depth(ps, sample.size = 25000, rngseed = 21122, replace = F)
df <- estimate_richness(ps.alpa)
df <- cbind(df, ps.alpa@sam_data)
library(gghalves)
ggplot(df, aes(x=Time_Point, y=Shannon, group=(interaction(Treatment,Time_Point)), color=Treatment)) +
#gghalves::geom_half_violin() +
gghalves::geom_half_point() +
gghalves::geom_half_boxplot()
#geom_boxplot() +
facet_wrap(~G_Sex) +
#geom_line(aes(group=Subject_ID)) +
NULL
library(gghalves)
ggplot(df, aes(x=Time_Point, y=Shannon, group=(interaction(Treatment,Time_Point)), color=Treatment)) +
#gghalves::geom_half_violin() +
gghalves::geom_half_point() +
gghalves::geom_half_boxplot()
#geom_boxplot() +
facet_wrap(~G_Sex) +
#geom_line(aes(group=Subject_ID)) +
NULL
library(gghalves)
ggplot(df, aes(x=Time_Point, y=Shannon, group=(interaction(Treatment,Time_Point)), color=Treatment)) +
#gghalves::geom_half_violin() +
gghalves::geom_half_point() +
gghalves::geom_half_boxplot()
#geom_boxplot() +
#facet_wrap(~G_Sex) +
#geom_line(aes(group=Subject_ID)) +
NULL
knitr::opts_chunk$set(echo = TRUE)
library(lmerTest)
library(ggplot2)
ps <- readRDS(url("https://github.com/AMCMC/MiCA-Tutorials/raw/master/Data_files/ps.2018_27_RED_study.2019-03-04.filtered.RDS"))
ps@sam_data$Treatment <- ps@sam_data$Randomization
ps.alpa <- rarefy_even_depth(ps, sample.size = 25000, rngseed = 21122, replace = F)
df <- estimate_richness(ps.alpa)
df <- cbind(df, ps.alpa@sam_data)
library(gghalves)
ggplot(df, aes(x=Time_Point, y=Shannon, group=(interaction(Treatment,Time_Point)), color=Treatment)) +
#gghalves::geom_half_violin() +
gghalves::geom_half_point() +
gghalves::geom_half_boxplot()
#geom_boxplot() +
#facet_wrap(~G_Sex) +
#geom_line(aes(group=Subject_ID)) +
NULL
knitr::opts_chunk$set(echo = TRUE)
library(lmerTest)
library(ggplot2)
ps <- readRDS(url("https://github.com/AMCMC/MiCA-Tutorials/raw/master/Data_files/ps.2018_27_RED_study.2019-03-04.filtered.RDS"))
ps@sam_data$Treatment <- ps@sam_data$Randomization
ps.alpa <- rarefy_even_depth(ps, sample.size = 25000, rngseed = 21122, replace = F)
df <- estimate_richness(ps.alpa)
df <- cbind(df, ps.alpa@sam_data)
library(gghalves)
ggplot(df, aes(x=Time_Point, y=Shannon, group=(interaction(Treatment,Time_Point)), color=Treatment)) +
#gghalves::geom_half_violin() +
gghalves::geom_half_point() +
gghalves::geom_half_boxplot()
#geom_boxplot() +
#facet_wrap(~G_Sex) +
#geom_line(aes(group=Subject_ID)) +
NULL
lmer(Shannon~Treatment*Time_Point + (1|Subject_ID), df)
summary(lmer(Shannon~Treatment*Time_Point*G_Sex + (1|Subject_ID), df))
knitr::opts_chunk$set(echo = TRUE)
library(lmerTest)
library(ggplot2)
ps <- readRDS(url("https://github.com/AMCMC/MiCA-Tutorials/raw/master/Data_files/ps.2018_27_RED_study.2019-03-04.filtered.RDS"))
ps@sam_data$Treatment <- ps@sam_data$Randomization
ps.alpa <- rarefy_even_depth(ps, sample.size = 25000, rngseed = 21122, replace = F)
ps.alpa
ps.rare <- rarefy_even_depth(ps, sample.size = 25000, rngseed = 21122, replace = F)
ps.rare
microbiome::aggregate_taxa(x = ps.rare, level = "Genus")
ps.rare.genus <- microbiome::aggregate_taxa(x = ps.rare, level = "Genus")
taxa_names(ps.rare.genus)
taxa <- taxa_names(ps.rare.genus)
taxa
prune_taxa(taxa[1], ps.rare)
prune_taxa(taxa[1], ps.rare.genus)
psmelt(prune_taxa(taxa[1], ps.rare.genus))
psm <- psmelt(prune_taxa(taxa[1], ps.rare.genus))
ps.rare.genus@sam_data$Treatment
lmer(Abundance ~ Treatment*Time_Point + (1 | Subject_ID))
lmer(Abundance ~ Treatment*Time_Point + (1 | Subject_ID), psm)
summary(lmer(Abundance ~ Treatment*Time_Point + (1 | Subject_ID), psm))
taxa[1]
lmer_taxa_ps <- function(taxa, ps){
psm <- psmelt(prune_taxa(taxa, ps))
fit <- lmer(Abundance ~ Treatment*Time_Point + (1 | Subject_ID), psm)
return(fit)
}
lmer_taxa_ps(taxa[1], ps.rare)
lmer_taxa_ps <- function(taxa, ps){
psm <- psmelt(prune_taxa(taxa, ps))
fit <- lmer(Abundance ~ Treatment*Time_Point + (1 | Subject_ID), psm)
return(fit)
}
lmer_taxa_ps(taxa[1], ps.rare.genus)
lapply(taxa, function(x) lmer_taxa_ps(x, ps.rare.genus))
all.fit <- lapply(taxa, function(x) lmer_taxa_ps(x, ps.rare.genus))
all.fit[[1]]
all.fit[[2]]
names(all.fit) <- taxa
all.fit[[1]]
summary(all.fit[[1]])
coefficients(summary(all.fit[[1]]))
coefficients(summary(all.fit[[1]]))["TreatmentGLIC","Estimate"]
coefficients(summary(all.fit[[1]]))["TreatmentGLIC","Estimate"]
coefficients(summary(all.fit[[1]]))["Time_Point1","Estimate"]
coefficients(summary(all.fit[[1]]))["TreatmentGLIC:Time_Point1","Estimate"]
coefficients(summary(all.fit[[1]]))["TreatmentGLIC","Pr(>|t|)"]
coefficients(summary(all.fit[[1]]))["Time_Point1","Pr(>|t|)"]
coefficients(summary(all.fit[[1]]))["TreatmentGLIC:Time_Point1","Pr(>|t|)"]
data.frame(taxa=taxa, ps.rare.genus[taxa,],
lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC","Estimate"]))
ps.rare.genus[taxa,]
ps.rare.genus
data.frame(taxa=taxa, ps.rare.genus@tax_table[taxa,],
lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC","Estimate"]))
df <- data.frame(taxa=taxa, ps.rare.genus@tax_table[taxa,],
lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC","Estimate"]))
df
df <- data.frame(taxa=taxa, ps.rare.genus@tax_table[taxa,],
Estimate.Treatment=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC","Estimate"])))
df
df <- data.frame(taxa=taxa, ps.rare.genus@tax_table[taxa,],
Estimate.Treatment=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC","Estimate"])),
Estimate.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["Time_Point1","Estimate"])),
Estimate.Treatment.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC:Time_Point1","Estimate"])),
Pvalue.Treatment=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC","Pr(>|t|)"])),
Pvalue.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["Time_Point1","Pr(>|t|)"])),
Pvalue.Treatment.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC:Time_Point1","Pr(>|t|)"]))
)
summary(all.fit[[1]])
df$Pvalue.Treatment.TimePoint
sort(df$Pvalue.Treatment.TimePoint)
p.adjust(sort(df$Pvalue.Treatment.TimePoint).   "fdr")
p.adjust(sort(df$Pvalue.Treatment.TimePoint),  "fdr")
df
summary(all.fit[[1]])
ps.rare.genus <- microbiome::aggregate_taxa(x = ps.rare, level = "Phylum")
taxa <- taxa_names(ps.rare.genus)
lmer_taxa_ps <- function(taxa, ps){
psm <- psmelt(prune_taxa(taxa, ps))
fit <- lmer(Abundance ~ Treatment*Time_Point + (1 | Subject_ID), psm)
return(fit)
}
all.fit <- lapply(taxa, function(x) lmer_taxa_ps(x, ps.rare.genus))
names(all.fit) <- taxa
summary(all.fit[[1]])
df <- data.frame(taxa=taxa, ps.rare.genus@tax_table[taxa,],
Estimate.Treatment=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC","Estimate"])),
Estimate.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["Time_Point1","Estimate"])),
Estimate.Treatment.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC:Time_Point1","Estimate"])),
Pvalue.Treatment=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC","Pr(>|t|)"])),
Pvalue.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["Time_Point1","Pr(>|t|)"])),
Pvalue.Treatment.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC:Time_Point1","Pr(>|t|)"]))
)
df$Pvalue.Treatment.TimePoint
p.adjust(df$Pvalue.Treatment.TimePoint, "fdr)"
)
p.adjust(df$Pvalue.Treatment.TimePoint, "fdr")
ps.rare.genus <- microbiome::aggregate_taxa(x = ps.rare, level = "Genus")
taxa <- taxa_names(ps.rare.genus)
lmer_taxa_ps <- function(taxa, ps){
psm <- psmelt(prune_taxa(taxa, ps))
fit <- lmer(Abundance ~ Treatment*Time_Point + (1 | Subject_ID), psm)
return(fit)
}
all.fit <- lapply(taxa, function(x) lmer_taxa_ps(x, ps.rare.genus))
names(all.fit) <- taxa
summary(all.fit[[1]])
df <- data.frame(taxa=taxa, ps.rare.genus@tax_table[taxa,],
Estimate.Treatment=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC","Estimate"])),
Estimate.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["Time_Point1","Estimate"])),
Estimate.Treatment.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC:Time_Point1","Estimate"])),
Pvalue.Treatment=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC","Pr(>|t|)"])),
Pvalue.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["Time_Point1","Pr(>|t|)"])),
Pvalue.Treatment.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC:Time_Point1","Pr(>|t|)"]))
)
ps.rare@tax_table[,"Species"]
na.omit(ps.rare@tax_table[,"Species"])
sort(na.omit(ps.rare@tax_table[,"Species"]))
taxa_sums(ps.rare.genus)
taxa_sums(ps.rare.genus)/sum(taxa_sums(ps.rare.genus))
df <- data.frame(taxa=taxa, mean_abundance=taxa_sums(ps.rare.genus)/sum(taxa_sums(ps.rare.genus))[taxa],
ps.rare.genus@tax_table[taxa,],
Estimate.Treatment=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC","Estimate"])),
Estimate.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["Time_Point1","Estimate"])),
Estimate.Treatment.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC:Time_Point1","Estimate"])),
Pvalue.Treatment=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC","Pr(>|t|)"])),
Pvalue.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["Time_Point1","Pr(>|t|)"])),
Pvalue.Treatment.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC:Time_Point1","Pr(>|t|)"]))
)
df$mean_abundance
df <- data.frame(taxa=taxa, mean_abundance=(taxa_sums(ps.rare.genus)/sum(taxa_sums(ps.rare.genus)))[taxa],
ps.rare.genus@tax_table[taxa,],
Estimate.Treatment=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC","Estimate"])),
Estimate.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["Time_Point1","Estimate"])),
Estimate.Treatment.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC:Time_Point1","Estimate"])),
Pvalue.Treatment=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC","Pr(>|t|)"])),
Pvalue.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["Time_Point1","Pr(>|t|)"])),
Pvalue.Treatment.TimePoint=unlist(lapply(taxa, function(x) coefficients(summary(all.fit[[x]]))["TreatmentGLIC:Time_Point1","Pr(>|t|)"]))
)
df$mean_abundance
ggplot(df, aes(x=mean_abundance, y=Pvalue.Treatment.TimePoint))
ggplot(df, aes(x=mean_abundance, y=Pvalue.Treatment.TimePoint)) + geom_contour_filled()
ggplot(df, aes(x=mean_abundance, y=Pvalue.Treatment.TimePoint)) + geom_point()
ggplot(df, aes(x=mean_abundance, y=Pvalue.Treatment.TimePoint)) + geom_point() + scale_x_log10()
ggplot(df, aes(x=mean_abundance, y=Pvalue.Treatment.TimePoint)) + geom_point() + scale_x_log10()
ggplot(df, aes(x=mean_abundance, y=Pvalue.Treatment.TimePoint)) + geom_point() + scale_x_log10()
ggplot(df, aes(x=mean_abundance, y=Pvalue.TimePoint)) + geom_point() + scale_x_log10()
ggplot(df, aes(x=mean_abundance, y=Pvalue.TimePoint)) + geom_point() + scale_x_log10()
ggplot(df, aes(x=mean_abundance, y=Pvalue.Treatment)) + geom_point() + scale_x_log10()
ggplot(df, aes(x=mean_abundance, y=Pvalue.Treatment)) + geom_point() + scale_x_log10()
ggplot(df, aes(x=mean_abundance, y=Pvalue.TimePoint)) + geom_point() + scale_x_log10()
ps.rare.genus <- microbiome::aggregate_taxa(x = ps.rare, level = "ASV")
taxa <- taxa_names(ps.rare.genus)
lmer_taxa_ps <- function(taxa, ps){
psm <- psmelt(prune_taxa(taxa, ps))
fit <- lmer(Abundance ~ Treatment*Time_Point + (1 | Subject_ID), psm)
return(fit)
}
all.fit <- lapply(taxa, function(x) lmer_taxa_ps(x, ps.rare.genus))
ps.rare.genus <- microbiome::aggregate_taxa(x = ps.rare, level = "ASV")
taxa <- taxa_names(ps.rare.genus)
lmer_taxa_ps <- function(taxa, ps){
psm <- psmelt(prune_taxa(taxa, ps))
fit <- lmer(Abundance ~ Treatment*Time_Point + (1 | Subject_ID), psm)
return(fit)
}
all.fit <- lapply(taxa, function(x) lmer_taxa_ps(x, ps.rare))
ps.rare.genus <- microbiome::aggregate_taxa(x = ps.rare, level = "ASV")
taxa <- taxa_names(ps.rare)
lmer_taxa_ps <- function(taxa, ps){
psm <- psmelt(prune_taxa(taxa, ps))
fit <- lmer(Abundance ~ Treatment*Time_Point + (1 | Subject_ID), psm)
return(fit)
}
all.fit <- lapply(taxa, function(x) lmer_taxa_ps(x, ps.rare))
taxa
taxa_sums(ps.rare)
sort(taxa_sums(ps.rare))
df
ggplot(df, aes(x=Estimate.Treatment.TimePoint, y=-log(Pvalue.Treatment.TimePoint), color=Phylum)) + geom_point() + scale_x_log10()
df$Estimate.Treatment.TimePoint
df$Pvalue.Treatment.TimePoint
ggplot(df, aes(x=Estimate.Treatment.TimePoint, y=-log(Pvalue.Treatment.TimePoint), color=Phylum)) + geom_point() + scale_x_log10()
df$Phylum
ggplot(df, aes(x=Estimate.Treatment.TimePoint, y=-log(Pvalue.Treatment.TimePoint), color=Phylum)) + geom_point()
summary(all.fit[[1]])
